/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FocusSession } from "./FocusSession";
import { FocusSessionCountArgs } from "./FocusSessionCountArgs";
import { FocusSessionFindManyArgs } from "./FocusSessionFindManyArgs";
import { FocusSessionFindUniqueArgs } from "./FocusSessionFindUniqueArgs";
import { CreateFocusSessionArgs } from "./CreateFocusSessionArgs";
import { UpdateFocusSessionArgs } from "./UpdateFocusSessionArgs";
import { DeleteFocusSessionArgs } from "./DeleteFocusSessionArgs";
import { User } from "../../user/base/User";
import { FocusSessionService } from "../focusSession.service";
@graphql.Resolver(() => FocusSession)
export class FocusSessionResolverBase {
  constructor(protected readonly service: FocusSessionService) {}

  async _focusSessionsMeta(
    @graphql.Args() args: FocusSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FocusSession])
  async focusSessions(
    @graphql.Args() args: FocusSessionFindManyArgs
  ): Promise<FocusSession[]> {
    return this.service.focusSessions(args);
  }

  @graphql.Query(() => FocusSession, { nullable: true })
  async focusSession(
    @graphql.Args() args: FocusSessionFindUniqueArgs
  ): Promise<FocusSession | null> {
    const result = await this.service.focusSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FocusSession)
  async createFocusSession(
    @graphql.Args() args: CreateFocusSessionArgs
  ): Promise<FocusSession> {
    return await this.service.createFocusSession({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FocusSession)
  async updateFocusSession(
    @graphql.Args() args: UpdateFocusSessionArgs
  ): Promise<FocusSession | null> {
    try {
      return await this.service.updateFocusSession({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FocusSession)
  async deleteFocusSession(
    @graphql.Args() args: DeleteFocusSessionArgs
  ): Promise<FocusSession | null> {
    try {
      return await this.service.deleteFocusSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: FocusSession): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
