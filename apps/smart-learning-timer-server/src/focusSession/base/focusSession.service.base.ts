/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FocusSession as PrismaFocusSession,
  User as PrismaUser,
} from "@prisma/client";

export class FocusSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FocusSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.focusSession.count(args);
  }

  async focusSessions(
    args: Prisma.FocusSessionFindManyArgs
  ): Promise<PrismaFocusSession[]> {
    return this.prisma.focusSession.findMany(args);
  }
  async focusSession(
    args: Prisma.FocusSessionFindUniqueArgs
  ): Promise<PrismaFocusSession | null> {
    return this.prisma.focusSession.findUnique(args);
  }
  async createFocusSession(
    args: Prisma.FocusSessionCreateArgs
  ): Promise<PrismaFocusSession> {
    return this.prisma.focusSession.create(args);
  }
  async updateFocusSession(
    args: Prisma.FocusSessionUpdateArgs
  ): Promise<PrismaFocusSession> {
    return this.prisma.focusSession.update(args);
  }
  async deleteFocusSession(
    args: Prisma.FocusSessionDeleteArgs
  ): Promise<PrismaFocusSession> {
    return this.prisma.focusSession.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.focusSession
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
