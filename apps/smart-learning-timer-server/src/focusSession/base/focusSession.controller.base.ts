/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FocusSessionService } from "../focusSession.service";
import { FocusSessionCreateInput } from "./FocusSessionCreateInput";
import { FocusSession } from "./FocusSession";
import { FocusSessionFindManyArgs } from "./FocusSessionFindManyArgs";
import { FocusSessionWhereUniqueInput } from "./FocusSessionWhereUniqueInput";
import { FocusSessionUpdateInput } from "./FocusSessionUpdateInput";

export class FocusSessionControllerBase {
  constructor(protected readonly service: FocusSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FocusSession })
  async createFocusSession(
    @common.Body() data: FocusSessionCreateInput
  ): Promise<FocusSession> {
    return await this.service.createFocusSession({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endTime: true,
        focusLevel: true,
        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FocusSession] })
  @ApiNestedQuery(FocusSessionFindManyArgs)
  async focusSessions(@common.Req() request: Request): Promise<FocusSession[]> {
    const args = plainToClass(FocusSessionFindManyArgs, request.query);
    return this.service.focusSessions({
      ...args,
      select: {
        createdAt: true,
        endTime: true,
        focusLevel: true,
        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FocusSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async focusSession(
    @common.Param() params: FocusSessionWhereUniqueInput
  ): Promise<FocusSession | null> {
    const result = await this.service.focusSession({
      where: params,
      select: {
        createdAt: true,
        endTime: true,
        focusLevel: true,
        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FocusSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFocusSession(
    @common.Param() params: FocusSessionWhereUniqueInput,
    @common.Body() data: FocusSessionUpdateInput
  ): Promise<FocusSession | null> {
    try {
      return await this.service.updateFocusSession({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endTime: true,
          focusLevel: true,
          id: true,
          startTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FocusSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFocusSession(
    @common.Param() params: FocusSessionWhereUniqueInput
  ): Promise<FocusSession | null> {
    try {
      return await this.service.deleteFocusSession({
        where: params,
        select: {
          createdAt: true,
          endTime: true,
          focusLevel: true,
          id: true,
          startTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
