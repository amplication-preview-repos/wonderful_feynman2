/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Reward } from "./Reward";
import { RewardCountArgs } from "./RewardCountArgs";
import { RewardFindManyArgs } from "./RewardFindManyArgs";
import { RewardFindUniqueArgs } from "./RewardFindUniqueArgs";
import { CreateRewardArgs } from "./CreateRewardArgs";
import { UpdateRewardArgs } from "./UpdateRewardArgs";
import { DeleteRewardArgs } from "./DeleteRewardArgs";
import { User } from "../../user/base/User";
import { RewardService } from "../reward.service";
@graphql.Resolver(() => Reward)
export class RewardResolverBase {
  constructor(protected readonly service: RewardService) {}

  async _rewardsMeta(
    @graphql.Args() args: RewardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Reward])
  async rewards(@graphql.Args() args: RewardFindManyArgs): Promise<Reward[]> {
    return this.service.rewards(args);
  }

  @graphql.Query(() => Reward, { nullable: true })
  async reward(
    @graphql.Args() args: RewardFindUniqueArgs
  ): Promise<Reward | null> {
    const result = await this.service.reward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Reward)
  async createReward(@graphql.Args() args: CreateRewardArgs): Promise<Reward> {
    return await this.service.createReward({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Reward)
  async updateReward(
    @graphql.Args() args: UpdateRewardArgs
  ): Promise<Reward | null> {
    try {
      return await this.service.updateReward({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Reward)
  async deleteReward(
    @graphql.Args() args: DeleteRewardArgs
  ): Promise<Reward | null> {
    try {
      return await this.service.deleteReward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Reward): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
