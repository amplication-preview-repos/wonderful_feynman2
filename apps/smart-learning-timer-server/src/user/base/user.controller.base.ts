/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { FocusAnalyticsFindManyArgs } from "../../focusAnalytics/base/FocusAnalyticsFindManyArgs";
import { FocusAnalytics } from "../../focusAnalytics/base/FocusAnalytics";
import { FocusAnalyticsWhereUniqueInput } from "../../focusAnalytics/base/FocusAnalyticsWhereUniqueInput";
import { FocusSessionFindManyArgs } from "../../focusSession/base/FocusSessionFindManyArgs";
import { FocusSession } from "../../focusSession/base/FocusSession";
import { FocusSessionWhereUniqueInput } from "../../focusSession/base/FocusSessionWhereUniqueInput";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { RewardWhereUniqueInput } from "../../reward/base/RewardWhereUniqueInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        name: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        name: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        name: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          name: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          name: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/focusAnalyticsItems")
  @ApiNestedQuery(FocusAnalyticsFindManyArgs)
  async findFocusAnalyticsItems(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FocusAnalytics[]> {
    const query = plainToClass(FocusAnalyticsFindManyArgs, request.query);
    const results = await this.service.findFocusAnalyticsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        sessionsCompleted: true,
        totalFocusTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/focusAnalyticsItems")
  async connectFocusAnalyticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusAnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusAnalyticsItems: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/focusAnalyticsItems")
  async updateFocusAnalyticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusAnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusAnalyticsItems: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/focusAnalyticsItems")
  async disconnectFocusAnalyticsItems(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusAnalyticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusAnalyticsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/focusSessions")
  @ApiNestedQuery(FocusSessionFindManyArgs)
  async findFocusSessions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<FocusSession[]> {
    const query = plainToClass(FocusSessionFindManyArgs, request.query);
    const results = await this.service.findFocusSessions(params.id, {
      ...query,
      select: {
        createdAt: true,
        endTime: true,
        focusLevel: true,
        id: true,
        startTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/focusSessions")
  async connectFocusSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusSessions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/focusSessions")
  async updateFocusSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusSessions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/focusSessions")
  async disconnectFocusSessions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: FocusSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      focusSessions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rewards")
  @ApiNestedQuery(RewardFindManyArgs)
  async findRewards(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Reward[]> {
    const query = plainToClass(RewardFindManyArgs, request.query);
    const results = await this.service.findRewards(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rewards")
  async connectRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rewards")
  async updateRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rewards")
  async disconnectRewards(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: RewardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rewards: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
