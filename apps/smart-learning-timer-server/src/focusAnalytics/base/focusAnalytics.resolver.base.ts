/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FocusAnalytics } from "./FocusAnalytics";
import { FocusAnalyticsCountArgs } from "./FocusAnalyticsCountArgs";
import { FocusAnalyticsFindManyArgs } from "./FocusAnalyticsFindManyArgs";
import { FocusAnalyticsFindUniqueArgs } from "./FocusAnalyticsFindUniqueArgs";
import { CreateFocusAnalyticsArgs } from "./CreateFocusAnalyticsArgs";
import { UpdateFocusAnalyticsArgs } from "./UpdateFocusAnalyticsArgs";
import { DeleteFocusAnalyticsArgs } from "./DeleteFocusAnalyticsArgs";
import { User } from "../../user/base/User";
import { FocusAnalyticsService } from "../focusAnalytics.service";
@graphql.Resolver(() => FocusAnalytics)
export class FocusAnalyticsResolverBase {
  constructor(protected readonly service: FocusAnalyticsService) {}

  async _focusAnalyticsItemsMeta(
    @graphql.Args() args: FocusAnalyticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FocusAnalytics])
  async focusAnalyticsItems(
    @graphql.Args() args: FocusAnalyticsFindManyArgs
  ): Promise<FocusAnalytics[]> {
    return this.service.focusAnalyticsItems(args);
  }

  @graphql.Query(() => FocusAnalytics, { nullable: true })
  async focusAnalytics(
    @graphql.Args() args: FocusAnalyticsFindUniqueArgs
  ): Promise<FocusAnalytics | null> {
    const result = await this.service.focusAnalytics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FocusAnalytics)
  async createFocusAnalytics(
    @graphql.Args() args: CreateFocusAnalyticsArgs
  ): Promise<FocusAnalytics> {
    return await this.service.createFocusAnalytics({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FocusAnalytics)
  async updateFocusAnalytics(
    @graphql.Args() args: UpdateFocusAnalyticsArgs
  ): Promise<FocusAnalytics | null> {
    try {
      return await this.service.updateFocusAnalytics({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FocusAnalytics)
  async deleteFocusAnalytics(
    @graphql.Args() args: DeleteFocusAnalyticsArgs
  ): Promise<FocusAnalytics | null> {
    try {
      return await this.service.deleteFocusAnalytics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: FocusAnalytics
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
