/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FocusAnalyticsService } from "../focusAnalytics.service";
import { FocusAnalyticsCreateInput } from "./FocusAnalyticsCreateInput";
import { FocusAnalytics } from "./FocusAnalytics";
import { FocusAnalyticsFindManyArgs } from "./FocusAnalyticsFindManyArgs";
import { FocusAnalyticsWhereUniqueInput } from "./FocusAnalyticsWhereUniqueInput";
import { FocusAnalyticsUpdateInput } from "./FocusAnalyticsUpdateInput";

export class FocusAnalyticsControllerBase {
  constructor(protected readonly service: FocusAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FocusAnalytics })
  async createFocusAnalytics(
    @common.Body() data: FocusAnalyticsCreateInput
  ): Promise<FocusAnalytics> {
    return await this.service.createFocusAnalytics({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        sessionsCompleted: true,
        totalFocusTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FocusAnalytics] })
  @ApiNestedQuery(FocusAnalyticsFindManyArgs)
  async focusAnalyticsItems(
    @common.Req() request: Request
  ): Promise<FocusAnalytics[]> {
    const args = plainToClass(FocusAnalyticsFindManyArgs, request.query);
    return this.service.focusAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        sessionsCompleted: true,
        totalFocusTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FocusAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async focusAnalytics(
    @common.Param() params: FocusAnalyticsWhereUniqueInput
  ): Promise<FocusAnalytics | null> {
    const result = await this.service.focusAnalytics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        sessionsCompleted: true,
        totalFocusTime: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FocusAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFocusAnalytics(
    @common.Param() params: FocusAnalyticsWhereUniqueInput,
    @common.Body() data: FocusAnalyticsUpdateInput
  ): Promise<FocusAnalytics | null> {
    try {
      return await this.service.updateFocusAnalytics({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          sessionsCompleted: true,
          totalFocusTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FocusAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFocusAnalytics(
    @common.Param() params: FocusAnalyticsWhereUniqueInput
  ): Promise<FocusAnalytics | null> {
    try {
      return await this.service.deleteFocusAnalytics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          sessionsCompleted: true,
          totalFocusTime: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
