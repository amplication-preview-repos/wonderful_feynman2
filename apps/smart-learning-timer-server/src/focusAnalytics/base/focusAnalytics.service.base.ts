/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FocusAnalytics as PrismaFocusAnalytics,
  User as PrismaUser,
} from "@prisma/client";

export class FocusAnalyticsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FocusAnalyticsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.focusAnalytics.count(args);
  }

  async focusAnalyticsItems(
    args: Prisma.FocusAnalyticsFindManyArgs
  ): Promise<PrismaFocusAnalytics[]> {
    return this.prisma.focusAnalytics.findMany(args);
  }
  async focusAnalytics(
    args: Prisma.FocusAnalyticsFindUniqueArgs
  ): Promise<PrismaFocusAnalytics | null> {
    return this.prisma.focusAnalytics.findUnique(args);
  }
  async createFocusAnalytics(
    args: Prisma.FocusAnalyticsCreateArgs
  ): Promise<PrismaFocusAnalytics> {
    return this.prisma.focusAnalytics.create(args);
  }
  async updateFocusAnalytics(
    args: Prisma.FocusAnalyticsUpdateArgs
  ): Promise<PrismaFocusAnalytics> {
    return this.prisma.focusAnalytics.update(args);
  }
  async deleteFocusAnalytics(
    args: Prisma.FocusAnalyticsDeleteArgs
  ): Promise<PrismaFocusAnalytics> {
    return this.prisma.focusAnalytics.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.focusAnalytics
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
